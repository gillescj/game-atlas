{"version":3,"sources":["apis/igdb.js","components/SearchBar.js","components/Loader.js","components/Header.js","components/GameCard.js","components/GameCardList.js","components/Footer.js","components/App.js","index.js"],"names":["axios","create","baseURL","timeout","headers","Accept","SearchBar","state","query","onInputChange","event","setState","target","value","onFormSubmit","preventDefault","props","className","onSubmit","this","onChange","type","placeholder","React","Component","Loader","Header","loading","GameCard","renderedScreenshot","renderedGenres","game","coverId","cover","image_id","coverURL","gameCard","src","alt","name","screenshots","screenshotId","screenshotURL","genres","map","genre","key","id","releaseDateString","first_release_date","releaseDate","Date","getDate","getMonth","getFullYear","renderedGameModal","trigger","position","on","repositionOnResize","rating","Math","round","modal","closeOnDocumentClick","lockScroll","contentStyle","width","overflowY","maxHeight","close","onClick","summary","GameCardList","games","gameCardList","Footer","href","App","a","igdb","method","data","response","console","log","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.f633fd3a.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst KEY = 'efb5f487c944d641ebb3d0394fafc386';\r\n\r\nexport default axios.create({\r\n    baseURL: 'https://cors-anywhere.herokuapp.com/https://api-v3.igdb.com/',\r\n    timeout: 0,\r\n    headers: {\r\n        Accept: 'application/json',\r\n        'user-key': KEY,\r\n        'Content-Type': 'text/plain'\r\n    }\r\n});\r\n","import React from 'react';\r\n\r\nexport default class SearchBar extends React.Component {\r\n    state = { query: '' };\r\n\r\n    onInputChange = event => {\r\n        this.setState({ query: event.target.value });\r\n    };\r\n\r\n    onFormSubmit = event => {\r\n        event.preventDefault();\r\n        this.props.onFormSubmit(this.state.query);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-form-container\">\r\n                <form className=\"search-form\" onSubmit={this.onFormSubmit}>\r\n                    <div className=\"search\">\r\n                        <input\r\n                            onChange={this.onInputChange}\r\n                            value={this.state.query}\r\n                            type=\"text\"\r\n                            placeholder=\"Search Games...\"\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import '../styles/Loader.scss';\r\nimport React from 'react';\r\n\r\nconst Loader = props => {\r\n    return (\r\n        <div className=\"loader-container\">\r\n            <div className=\"loader\"></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loader;\r\n","import '../styles/Header.scss';\r\nimport React from 'react';\r\nimport SearchBar from './SearchBar';\r\nimport Loader from './Loader';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header className=\"main-header\">\r\n            <h1 className=\"title\">Game Atlas</h1>\r\n            <SearchBar onFormSubmit={props.onFormSubmit} />\r\n            {props.loading ? <Loader /> : null}\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;\r\n","import '../styles/GameCard.scss';\r\nimport React from 'react';\r\nimport Popup from 'reactjs-popup';\r\n\r\nconst GameCard = ({ game }) => {\r\n    const coverId = game.cover.image_id;\r\n    const coverSize = 'cover_big';\r\n    const coverURL = `https://images.igdb.com/igdb/image/upload/t_${coverSize}/${coverId}.jpg`;\r\n\r\n    const gameCard = <img src={coverURL} alt={game.name} />;\r\n\r\n    let renderedScreenshot;\r\n    if (game.screenshots) {\r\n        const screenshotId = game.screenshots[0].image_id;\r\n        const screenshotSize = 'screenshot_big';\r\n        const screenshotURL = `https://images.igdb.com/igdb/image/upload/t_${screenshotSize}/${screenshotId}.jpg`;\r\n\r\n        renderedScreenshot = <img src={screenshotURL} alt={`${game.name} Gameplay`} />;\r\n    } else {\r\n        renderedScreenshot = null;\r\n    }\r\n\r\n    let renderedGenres;\r\n\r\n    if (game.genres) {\r\n        renderedGenres = game.genres.map(genre => {\r\n            return <div key={genre.id}>{genre.name}</div>;\r\n        });\r\n    } else {\r\n        renderedGenres = null;\r\n    }\r\n\r\n    const months = [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'Septemper',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ];\r\n\r\n    let releaseDateString;\r\n    if (game.first_release_date) {\r\n        const releaseDate = new Date(game.first_release_date * 1000);\r\n        releaseDateString = `${releaseDate.getDate()} ${months[releaseDate.getMonth()]} \r\n        ${releaseDate.getFullYear()}`;\r\n    } else {\r\n        releaseDateString = 'Unknown';\r\n    }\r\n\r\n    const renderedGameModal = (\r\n        <Popup\r\n            trigger={\r\n                <div>\r\n                    {\r\n                        <Popup\r\n                            trigger={<div className=\"game-card\">{gameCard}</div>}\r\n                            position=\"top center\"\r\n                            on=\"hover\"\r\n                            repositionOnResize={true}\r\n                        >\r\n                            <div>\r\n                                <h3>{game.name}</h3>\r\n                                <h2>{game.rating ? Math.round(game.rating, 0) : null}</h2>\r\n                            </div>\r\n                        </Popup>\r\n                    }\r\n                </div>\r\n            }\r\n            modal\r\n            closeOnDocumentClick\r\n            lockScroll\r\n            contentStyle={{ width: '85%', overflowY: 'auto', maxHeight: '90vh' }}\r\n        >\r\n            {close => (\r\n                <div className=\"game-modal\">\r\n                    <header>\r\n                        <a className=\"close\" onClick={close}>\r\n                            &times;\r\n                        </a>\r\n                        <h1>{game.name}</h1>\r\n                    </header>\r\n                    <div className=\"game-modal-top-info\">\r\n                        <div className=\"genres\">{renderedGenres}</div>\r\n                        <div className=\"rating\">\r\n                            Rating: {game.rating ? Math.round(game.rating, 0) : '0'}\r\n                        </div>\r\n                        <div className=\"release-date\">Released: {releaseDateString}</div>\r\n                    </div>\r\n                    <p className=\"summary\">{game.summary}</p>\r\n                    <div className=\"screenshot\">{renderedScreenshot}</div>\r\n                </div>\r\n            )}\r\n        </Popup>\r\n    );\r\n\r\n    return <div className=\"game-card-container\">{renderedGameModal}</div>;\r\n};\r\n\r\nexport default GameCard;\r\n","import '../styles/GameCardList.scss';\r\nimport React from 'react';\r\nimport GameCard from './GameCard';\r\n\r\nconst GameCardList = ({ games }) => {\r\n    if (!games) return;\r\n    const gameCardList = games.map(game => {\r\n        if (!game.cover) return null;\r\n        return <GameCard key={game.id} game={game} />;\r\n    });\r\n    return <div className=\"game-card-list\">{gameCardList}</div>;\r\n};\r\n\r\nexport default GameCardList;\r\n","import '../styles/Footer.scss';\r\nimport React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"main-footer\">\r\n            <h3 className=\"attribution\">\r\n                Made possible with{' '}\r\n                <a target=\"_blank\" href=\"https://api-docs.igdb.com\">\r\n                    IGDB\r\n                </a>\r\n            </h3>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport igdb from '../apis/igdb';\r\nimport Header from './Header';\r\nimport GameCardList from './GameCardList';\r\nimport Footer from './Footer';\r\n\r\nexport default class App extends React.Component {\r\n    state = { games: [], loading: false };\r\n\r\n    componentDidMount() {\r\n        this.onFormSubmit('witcher');\r\n    }\r\n\r\n    onFormSubmit = async query => {\r\n        if (!query) return;\r\n        try {\r\n            this.setState({ loading: true });\r\n            const response = await igdb('games', {\r\n                method: 'POST',\r\n                data: `search \"${query}\"; fields name, rating, popularity, cover.*, screenshots.*, genres.name, first_release_date, summary;\r\n                limit 50;`\r\n            });\r\n            this.setState({ loading: false, games: response.data });\r\n            console.log(this.state);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Header onFormSubmit={this.onFormSubmit} loading={this.state.loading} />\r\n                <GameCardList games={this.state.games} />\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import './styles/base.scss';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n"],"sourceRoot":""}